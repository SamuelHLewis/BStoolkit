#!/usr/bin/env python3

from os import system,remove
import sys
import subprocess
import shutil
import re
import argparse
import pandas as pd
import numpy as np

###########################
## USER ARGUMENT PARSING ##
###########################
parser = argparse.ArgumentParser(description='Read arguments')
parser.add_argument('-a', '--annotation', type=str, help='Annotation file for features of interest (gff format)')
parser.add_argument('-m', '--methylation', type=str, help='Methylation levels file (.output file as generated by MethylExtract)')
parser.add_argument('-r', '--RNAseq', type=str, help='RNAseq alignment file (bam format)')
parser.add_argument('-p', '--piRNA', type=str, help='piRNA alignment file (bam format)')
parser.add_argument('-s', '--siRNA', type=str, help='siRNA alignment file (bam format)')
args = parser.parse_args()
# annotation file parsing
annotation_file = args.annotation
if annotation_file is not None:
	print("Annotation file is " + annotation_file)
else:
	print("ERROR: no annotation file (-a) specified")
	sys.exit(0)
# methylation file parsing
methylation_file = args.methylation
if methylation_file is not None:
	print("Methylation file is " + methylation_file)
else:
	print("ERROR: no methylation file (-m) specified")
	sys.exit(0)
# RNAseq file parsing
RNAseq_file = args.RNAseq
if RNAseq_file is not None:
	print("RNAseq file is " + RNAseq_file)
else:
	print("ERROR: no RNAseq file (-r) specified")
	sys.exit(0)
# piRNA file parsing
piRNA_file = args.piRNA
if piRNA_file is not None:
	print("piRNA file is " + piRNA_file)
else:
	print("ERROR: no piRNA file (-p) specified")
	sys.exit(0)
# siRNA file parsing
siRNA_file = args.siRNA
if siRNA_file is not None:
	print("siRNA file is " + siRNA_file)
else:
	print("ERROR: no siRNA file (-s) specified")
	sys.exit(0)

##########################
## FUNCTION DEFINITIONS ##
##########################

# function to take a line from a MethyExtract output file, and return a bed-formatted line with % methylation on both strands
def ME_converter(line):
	Line = line.split()
	Chromosome = Line[0]
	Start = str(int(Line[1])-1)
	End = str(int(Line[1])+1)
	Name = "m"+Line[2]
	# note: "Score" here is the mean of the % methylated reads on both strands
	Score = str((((int(Line[3])/int(Line[4]))*100)+((int(Line[6])/int(Line[7]))*100))/2)
	bed_line = Chromosome + "\t" + Start + "\t" + End + "\t" + Name + "\t" + Score
	return(bed_line)

# function to take a MethylExtract output file and output a bed file
def ME_to_BED(ME_file):
	# read input file, keep only lines with methylation called on both strands
	both_strands = []
	for line in open(ME_file, "r"):
		if not line.startswith("#"):
			temp = line.split("\t")
			if not "." in temp:
				both_strands.append(line.strip("\n"))

	# convert lines to bed format
	bed_format_lines = []
	for i in both_strands:
		bed_format_lines.append(ME_converter(i))

	# format output bed file
	bed_output = ""
	for i in bed_format_lines:
		bed_output += i + "\n"
	# output bed file to current working dir, but keep file name
	bed_outfile_name = ME_file.split("/")[-1].replace(".output",".bed")
	bed_outfile = open(bed_outfile_name,"wt")
	bed_outfile.write(bed_output)
	bed_outfile.close()
	return(bed_outfile_name)

# function to take a bed file of methylation levels for cytosines and a gff feature file, and generate mean methylation levels for each feature
def Feature_Meth(meth_bed,GFF):
	# remove path from input filenames (to allow adjusted versions to be written to working directory)
	meth_bed_input = meth_bed.split("/")[-1]
	GFF_input = GFF.split("/")[-1]
	# sort bedfile and feature files
	system("bedtools sort -i " + meth_bed + " > " + meth_bed_input.replace(".bed",".sorted.bed"))
	system("bedtools sort -i " + GFF + " > " + GFF_input.replace(".gff",".sorted.gff"))
	# generate mean methylation levels for each feature, and print the levels for each cytosine used to calculate mean
	system("bedtools map -a " + GFF_input.replace(".gff",".sorted.gff") + " -b " + meth_bed_input.replace(".bed",".sorted.bed") + " -c 5 -o collapse,mean > " + GFF_input.replace(".gff",".CG.bed"))
	# remove intermediate files
	remove(meth_bed_input.replace(".bed",".sorted.bed"))
	remove(GFF_input.replace(".gff",".sorted.gff"))
	print("Methylation levels for " + GFF_input + " written to " + GFF_input.replace(".gff",".CG.bed"))
	return()


#################
## ACTUAL CODE ##
#################
## convert MethylExtract file to BED file
#input_bed = ME_to_BED(ME_file=methylation_file)

## calculate mean methylation level for each feature in annotation file, and delete whole-genome bed file
#Feature_Meth(meth_bed=input_bed,GFF=annotation_file)
#remove(input_bed)

# count RNAseq
print("Counting RNAseq reads")
#system("bedtools coverage -s -counts -a " + annotation_file + " -b " + RNAseq_file + " > RNA.count")

# count siRNA
print("Counting siRNAs")
#system("bedtools coverage -s -counts -a " + annotation_file + " -b " + siRNA_file + " > siRNA.count")

# count piRNA
print("Counting piRNAs")
#system("bedtools coverage -s -counts -a " + annotation_file + " -b " + piRNA_file + " > piRNA.count")

# read in methylation, RNAseq, siRNA & piRNA counts
meth_counts = pd.read_table("Exons.CG.bed", header = None) 
RNA_counts = pd.read_table("RNA.count", header = None) 
siRNA_counts = pd.read_table("siRNA.count", header = None) 
piRNA_counts = pd.read_table("piRNA.count", header = None)
# paste RNAseq, siRNA & piRNA counts onto methylation levels to create output file
combined_data = pd.concat([meth_counts, RNA_counts.iloc[:,-1], siRNA_counts.iloc[:,-1], piRNA_counts.iloc[:,-1]], axis = 1)
combined_data.columns = ["Chromosome", "Program", "Feature", "Start", "End", "INTENTIONALLYBLANK", "Strand", "INTENTIONALLYBLANK", "Name", "IndividualCytosineMethylation", "MeanMethylation", "RNAseq", "siRNA", "piRNA"]
# output to file
combined_data.to_csv("Concatenated.counts", sep = "\t")
print("Combined output written to Concatenated.counts")

# remove intermediate files

